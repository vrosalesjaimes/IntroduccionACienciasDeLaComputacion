diff --git a/src/main/java/mx/unam/ciencias/icc/Estudiante.java b/src/main/java/mx/unam/ciencias/icc/Estudiante.java
index 2e6fcc0..77e2b7e 100644
--- a/src/main/java/mx/unam/ciencias/icc/Estudiante.java
+++ b/src/main/java/mx/unam/ciencias/icc/Estudiante.java
@@ -26,7 +26,10 @@ public class Estudiante {
                       int    cuenta,
                       double promedio,
                       int    edad) {
-        // Aquí va su código.
+        this.nombre = nombre;
+        this.cuenta = cuenta;
+  	this.promedio = promedio;
+ 	this.edad = edad;
     }
 
     /**
@@ -34,7 +37,7 @@ public class Estudiante {
      * @return el nombre del estudiante.
      */
     public String getNombre() {
-        // Aquí va su código.
+        return nombre;
     }
 
     /**
@@ -42,7 +45,7 @@ public class Estudiante {
      * @param nombre el nuevo nombre del estudiante.
      */
     public void setNombre(String nombre) {
-        // Aquí va su código.
+        this.nombre = nombre;
     }
 
     /**
@@ -50,7 +53,7 @@ public class Estudiante {
      * @return el número de cuenta del estudiante.
      */
     public int getCuenta() {
-        // Aquí va su código.
+        return cuenta;
     }
 
     /**
@@ -58,7 +61,7 @@ public class Estudiante {
      * @param cuenta el nuevo número de cuenta del estudiante.
      */
     public void setCuenta(int cuenta) {
-        // Aquí va su código.
+        this.cuenta = cuenta;
     }
 
     /**
@@ -66,7 +69,7 @@ public class Estudiante {
      * @return el promedio del estudiante.
      */
     public double getPromedio() {
-        // Aquí va su código.
+        return promedio;
     }
 
     /**
@@ -74,7 +77,7 @@ public class Estudiante {
      * @param promedio el nuevo promedio del estudiante.
      */
     public void setPromedio(double promedio) {
-        // Aquí va su código.
+        this.promedio = promedio;
     }
 
     /**
@@ -82,7 +85,7 @@ public class Estudiante {
      * @return la edad del estudiante.
      */
     public int getEdad() {
-        // Aquí va su código.
+        return edad;
     }
 
     /**
@@ -90,7 +93,7 @@ public class Estudiante {
      * @param edad la nueva edad del estudiante.
      */
     public void setEdad(int edad) {
-        // Aquí va su código.
+        this.edad = edad;
     }
 
     /**
@@ -98,7 +101,12 @@ public class Estudiante {
      * @return una representación en cadena del estudiante.
      */
     @Override public String toString() {
-        // Aquí va su código.
+        String est = String.format("Nombre   : %s\n" +
+                                   "Cuenta   : %09d\n" +
+                                   "Promedio : %2.2f\n" +
+                                   "Edad     : %d",
+                                    nombre, cuenta, promedio, edad);
+	return est;
     }
 
     /**
@@ -113,6 +121,8 @@ public class Estudiante {
         if (!(objeto instanceof Estudiante))
             return false;
         Estudiante estudiante = (Estudiante)objeto;
-        // Aquí va su código.
+        if(objeto == null) return false;
+	 else if(this.toString().equals(objeto.toString())) return true;
+	 return false;
     }
 }
diff --git a/src/main/java/mx/unam/ciencias/icc/Lista.java b/src/main/java/mx/unam/ciencias/icc/Lista.java
index 106877b..aef7a0a 100644
--- a/src/main/java/mx/unam/ciencias/icc/Lista.java
+++ b/src/main/java/mx/unam/ciencias/icc/Lista.java
@@ -26,7 +26,7 @@ public class Lista {
 
         /* Construye un nodo con un elemento. */
         private Nodo(Object elemento) {
-            // Aquí va su código.
+            this.elemento = elemento;
         }
 
         /**
@@ -34,7 +34,7 @@ public class Lista {
          * @return el nodo anterior del nodo.
          */
         public Nodo getAnterior() {
-            // Aquí va su código.
+            return anterior;
         }
 
         /**
@@ -42,7 +42,7 @@ public class Lista {
          * @return el nodo siguiente del nodo.
          */
         public Nodo getSiguiente() {
-            // Aquí va su código.
+            return siguiente;
         }
 
         /**
@@ -50,7 +50,7 @@ public class Lista {
          * @return el elemento del nodo.
          */
         public Object get() {
-            // Aquí va su código.
+            return elemento;
         }
     }
 
@@ -66,7 +66,7 @@ public class Lista {
      * @return la longitud de la lista, el número de elementos que contiene.
      */
     public int getLongitud() {
-        // Aquí va su código.
+        return longitud;
     }
 
     /**
@@ -75,7 +75,7 @@ public class Lista {
      *         otro caso.
      */
     public boolean esVacia() {
-        // Aquí va su código.
+        return longitud == 0;
     }
 
     /**
@@ -85,7 +85,20 @@ public class Lista {
      *                 si es distinto de <code>null</code>.
      */
     public void agregaFinal(Object elemento) {
-        // Aquí va su código.
+        if(elemento == null)
+	    return;
+	
+	Nodo nodo = new Nodo(elemento);
+	
+	if(esVacia()){
+	    cabeza = nodo;
+	    rabo = cabeza;
+        }else{
+	    nodo.anterior = rabo;
+            rabo.siguiente = nodo;
+            rabo = nodo;
+        }
+        longitud++;
     }
 
     /**
@@ -95,7 +108,20 @@ public class Lista {
      *                 si es distinto de <code>null</code>.
      */
     public void agregaInicio(Object elemento) {
-        // Aquí va su código.
+        if(elemento == null)
+	    return;
+	
+	Nodo nodo = new Nodo(elemento);
+	
+	if(esVacia()){
+	    cabeza = nodo;
+	    rabo = cabeza;
+        }else{
+	    nodo.siguiente = cabeza;
+            cabeza.anterior = nodo;
+            cabeza = nodo;
+        }
+        longitud++;
     }
 
     /**
@@ -113,16 +139,33 @@ public class Lista {
      *                 si es distinto de <code>null</code>.
      */
     public void inserta(int i, Object elemento) {
-        // Aquí va su código.
-    }
+        if(elemento == null)
+	    return;
+        else if(i <= 0){
+	    agregaInicio(elemento);
+	    return;
+	}else if(longitud <= i){
+	    agregaFinal(elemento);
+	}else{
+	    Nodo nodo = buscaNodo(get(i));
+            Nodo nuevo = new Nodo(elemento);
 
+	    nodo.anterior.siguiente = nuevo;
+            nuevo.anterior = nodo.anterior;
+            nodo.anterior = nuevo;
+            nuevo.siguiente = nodo;
+	    longitud++;
+	}
+    }
+    
     /**
      * Elimina un elemento de la lista. Si el elemento no está contenido en la
      * lista, el método no la modifica.
      * @param elemento el elemento a eliminar.
      */
     public void elimina(Object elemento) {
-        // Aquí va su código.
+        Nodo nodo = buscaNodo(elemento);
+	eliminaNodo(nodo);
     }
 
     /**
@@ -131,7 +174,20 @@ public class Lista {
      *         <code>null</code> si la lista es vacía.
      */
     public Object eliminaPrimero() {
-        // Aquí va su código.
+        if(esVacia())
+	    return null;
+
+	Nodo nodo = cabeza;
+
+	if(longitud == 1)
+	    limpia();
+        else{
+	    cabeza = cabeza.siguiente;
+            cabeza.anterior = null;
+            longitud--;
+        }
+	
+        return nodo.elemento;
     }
 
     /**
@@ -140,7 +196,20 @@ public class Lista {
      *         <code>null</code> si la lista es vacía.
      */
     public Object eliminaUltimo() {
-        // Aquí va su código.
+        if(esVacia())
+	    return null;
+
+	Nodo nodo = rabo;
+
+	if(longitud == 1)
+	    limpia();
+        else{
+	    rabo = rabo.anterior;
+            rabo.siguiente = null;
+            longitud--;
+        }
+	
+        return nodo.elemento;
     }
 
     /**
@@ -150,7 +219,7 @@ public class Lista {
      *         <code>false</code> en otro caso.
      */
     public boolean contiene(Object elemento) {
-        // Aquí va su código.
+        return buscaNodo(elemento) != null;
     }
 
     /**
@@ -158,7 +227,15 @@ public class Lista {
      * @return una nueva lista que es la reversa la que manda llamar el método.
      */
     public Lista reversa() {
-        // Aquí va su código.
+        Lista reversa = new Lista();
+        Nodo nodo = rabo;
+	
+	while(nodo != null){
+	    reversa.agregaFinal(nodo.elemento);
+            nodo = nodo.anterior;
+        }
+	
+	return reversa;
     }
 
     /**
@@ -167,14 +244,25 @@ public class Lista {
      * @return una copiad de la lista.
      */
     public Lista copia() {
-        // Aquí va su código.
+	Lista copia = new Lista();
+	Nodo nodo = cabeza;
+	
+        if(esVacia())
+	    return copia;
+        while(nodo != null){
+	    copia.agregaFinal(nodo.elemento);
+            nodo = nodo.siguiente;
+        }
+	
+        return copia;
     }
 
     /**
      * Limpia la lista de elementos, dejándola vacía.
      */
     public void limpia() {
-        // Aquí va su código.
+        cabeza = rabo = null;
+	longitud = 0;
     }
 
     /**
@@ -183,7 +271,11 @@ public class Lista {
      *         es vacía.
      */
     public Object getPrimero() {
-        // Aquí va su código.
+        if(esVacia())
+	    return null;
+	else{
+	    return cabeza.elemento;
+	}
     }
 
     /**
@@ -192,7 +284,11 @@ public class Lista {
      *         es vacía.
      */
     public Object getUltimo() {
-        // Aquí va su código.
+        if(esVacia())
+	    return null;
+	else{
+	    return rabo.elemento;
+	}
     }
 
     /**
@@ -203,7 +299,17 @@ public class Lista {
      *         elementos en la lista.
      */
     public Object get(int i) {
-        // Aquí va su código.
+        if(i < 0 || i >= longitud)
+	    return null;
+
+	Nodo nodo = cabeza;
+
+	while(i > 0){
+	    nodo = nodo.siguiente;
+	    i--;
+        }
+	
+        return nodo.elemento;
     }
 
     /**
@@ -213,7 +319,18 @@ public class Lista {
      *         no está contenido en la lista.
      */
     public int indiceDe(Object elemento) {
-        // Aquí va su código.
+        Nodo nodo = cabeza;
+        int indice = 0;
+	
+        while( nodo != null){
+	    if(nodo.elemento.equals(elemento))
+		return indice;
+
+	    nodo = nodo.siguiente;
+            indice++;
+	}
+	
+	return -1;
     }
 
     /**
@@ -221,7 +338,17 @@ public class Lista {
      * @return una representación en cadena de la lista.
      */
     @Override public String toString() {
-        // Aquí va su código.
+        if(esVacia())
+	    return "[]";
+
+	String repCadena = "[";
+
+	for (int i = 0; i < longitud-1; i++)
+	    repCadena += get(i) + ", ";
+
+	repCadena += get(longitud-1) + "]";
+
+	return repCadena;
     }
 
     /**
@@ -234,7 +361,22 @@ public class Lista {
         if (!(objeto instanceof Lista))
             return false;
         Lista lista = (Lista)objeto;
-        // Aquí va su código.
+	if(lista == null)
+	    return false;
+        else if(lista.getLongitud() != longitud)
+	    return false;
+        else if(lista.getLongitud() == 0 && longitud == 0)
+	    return true;
+	
+        Nodo nodo = cabeza;
+	
+	for(int i = 0; i< longitud; i++){
+	    if(nodo.elemento.equals(lista.get(i)) == false)
+		return false;
+	    nodo = nodo.siguiente;
+        }
+
+	return true;
     }
 
     /**
@@ -242,7 +384,7 @@ public class Lista {
      * @return el nodo cabeza de la lista.
      */
     public Nodo getCabeza() {
-        // Aquí va su código.
+        return cabeza;
     }
 
     /**
@@ -250,6 +392,43 @@ public class Lista {
      * @return el nodo rabo de la lista.
      */
     public Nodo getRabo() {
-        // Aquí va su código.
+        return rabo;
+    }
+
+    private Nodo buscaNodo(Object elemento){
+	if(elemento == null)
+	    return null;
+	
+	Nodo nodo = cabeza;
+
+	while(nodo != null){
+	    if(nodo.elemento.equals(elemento))
+		return nodo;
+	    
+	    nodo = nodo.siguiente;
+	}
+	
+	return null;
+    }
+
+    
+    private void eliminaNodo(Nodo nodo){
+	if(nodo == null)
+	    return;
+	else if(longitud == 1 && contiene(nodo.elemento))
+	    limpia();
+	else if(!contiene(nodo.elemento))
+	    return;
+	else if(nodo.equals(rabo)){
+	    eliminaUltimo();
+	    return;
+	}else if(nodo.equals(cabeza)){
+	    eliminaPrimero();
+	    return; 
+	}else{
+	    nodo.anterior.siguiente = nodo.siguiente;
+	    nodo.siguiente.anterior = nodo.anterior;
+	    longitud--;
+	}
     }
 }
