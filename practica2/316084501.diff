diff --git a/src/main/java/mx/unam/ciencias/icc/Estudiante.java b/src/main/java/mx/unam/ciencias/icc/Estudiante.java
index bc7557e..f55dc9a 100644
--- a/src/main/java/mx/unam/ciencias/icc/Estudiante.java
+++ b/src/main/java/mx/unam/ciencias/icc/Estudiante.java
@@ -26,7 +26,10 @@ public class Estudiante {
                       int    cuenta,
                       double promedio,
                       int    edad) {
-        // Aquí va su código.
+        this.nombre = nombre;
+        this.cuenta = cuenta;
+	    this.promedio = promedio;
+	    this.edad = edad;
     }
 
     /**
@@ -34,7 +37,7 @@ public class Estudiante {
      * @return el nombre del estudiante.
      */
     public String getNombre() {
-        // Aquí va su código.
+        return nombre;
     }
 
     /**
@@ -42,7 +45,7 @@ public class Estudiante {
      * @param nombre el nuevo nombre del estudiante.
      */
     public void setNombre(String nombre) {
-        // Aquí va su código.
+        this.nombre = nombre;
     }
 
     /**
@@ -50,7 +53,7 @@ public class Estudiante {
      * @return el número de cuenta del estudiante.
      */
     public int getCuenta() {
-        // Aquí va su código.
+        return cuenta;
     }
 
     /**
@@ -58,7 +61,7 @@ public class Estudiante {
      * @param cuenta el nuevo número de cuenta del estudiante.
      */
     public void setCuenta(int cuenta) {
-        // Aquí va su código.
+        this.cuenta = cuenta;
     }
 
     /**
@@ -66,7 +69,7 @@ public class Estudiante {
      * @return el promedio del estudiante.
      */
     public double getPromedio() {
-        // Aquí va su código.
+        return promedio;
     }
 
     /**
@@ -74,7 +77,7 @@ public class Estudiante {
      * @param promedio el nuevo promedio del estudiante.
      */
     public void setPromedio(double promedio) {
-        // Aquí va su código.
+	this.promedio = promedio;
     }
 
     /**
@@ -82,7 +85,7 @@ public class Estudiante {
      * @return la edad del estudiante.
      */
     public int getEdad() {
-        // Aquí va su código.
+        return edad;
     }
 
     /**
@@ -90,7 +93,7 @@ public class Estudiante {
      * @param edad la nueva edad del estudiante.
      */
     public void setEdad(int edad) {
-        // Aquí va su código.
+        this.edad = edad;
     }
 
     /**
@@ -98,7 +101,12 @@ public class Estudiante {
      * @return una representación en cadena del estudiante.
      */
     public String toString() {
-        // Aquí va su código.
+         String est = String.format("Nombre   : %s\n" +
+                               "Cuenta   : %09d\n" +
+                               "Promedio : %2.2f\n" +
+                               "Edad     : %d",
+                               nombre, cuenta, promedio, edad);
+	 return est;
     }
 
     /**
@@ -110,6 +118,12 @@ public class Estudiante {
      *         <code>false</code> en otro caso.
      */
     public boolean equals(Estudiante estudiante) {
-        // Aquí va su código.
+        if (estudiante == null)
+            return false;
+	else if(this.toString().equals(estudiante.toString()))
+	    return true;
+	else
+	    return false;
+        
     }
 }
diff --git a/src/main/java/mx/unam/ciencias/icc/ListaEstudiante.java b/src/main/java/mx/unam/ciencias/icc/ListaEstudiante.java
index c6ca8e6..0ffe634 100644
--- a/src/main/java/mx/unam/ciencias/icc/ListaEstudiante.java
+++ b/src/main/java/mx/unam/ciencias/icc/ListaEstudiante.java
@@ -29,7 +29,7 @@ public class ListaEstudiante {
 
         /* Construye un nodo con un elemento. */
         private Nodo(Estudiante elemento) {
-            // Aquí va su código.
+            this.elemento = elemento;
         }
 
         /**
@@ -37,7 +37,7 @@ public class ListaEstudiante {
          * @return el nodo anterior del nodo.
          */
         public Nodo getAnterior() {
-            // Aquí va su código.
+            return anterior;
         }
 
         /**
@@ -45,7 +45,7 @@ public class ListaEstudiante {
          * @return el nodo siguiente del nodo.
          */
         public Nodo getSiguiente() {
-            // Aquí va su código.
+            return siguiente;
         }
 
         /**
@@ -53,7 +53,7 @@ public class ListaEstudiante {
          * @return el elemento del nodo.
          */
         public Estudiante get() {
-            // Aquí va su código.
+	    return elemento;
         }
     }
 
@@ -69,7 +69,7 @@ public class ListaEstudiante {
      * @return la longitud de la lista, el número de elementos que contiene.
      */
     public int getLongitud() {
-        // Aquí va su código.
+        return longitud;
     }
 
     /**
@@ -78,7 +78,7 @@ public class ListaEstudiante {
      *         otro caso.
      */
     public boolean esVacia() {
-        // Aquí va su código.
+        return longitud == 0;
     }
 
     /**
@@ -88,7 +88,18 @@ public class ListaEstudiante {
      *                 si es distinto de <code>null</code>.
      */
     public void agregaFinal(Estudiante elemento) {
-        // Aquí va su código.
+        if(elemento == null)
+	    return;
+	Nodo nodo = new Nodo(elemento);
+	longitud++;
+	if(rabo == null){
+	    cabeza = nodo;
+	    rabo = cabeza;
+	}else{
+	    nodo.anterior = rabo;
+	    rabo.siguiente = nodo;
+	    rabo = nodo;
+	}
     }
 
     /**
@@ -98,7 +109,18 @@ public class ListaEstudiante {
      *                 si es distinto de <code>null</code>.
      */
     public void agregaInicio(Estudiante elemento) {
-        // Aquí va su código.
+	if(elemento == null)
+	    return;
+        Nodo nodo = new Nodo(elemento);
+        if(esVacia()){
+	    cabeza = nodo;
+	    rabo = cabeza;	    
+        }else{
+          nodo.siguiente = cabeza;
+          cabeza.anterior = nodo;
+          cabeza = nodo;
+        }
+        longitud++;
     }
 
     /**
@@ -116,7 +138,24 @@ public class ListaEstudiante {
      *                 si es distinto de <code>null</code>.
      */
     public void inserta(int i, Estudiante elemento) {
-        // Aquí va su código.
+        if(elemento == null)
+	    return;
+	else if(i < 1){
+	    agregaInicio(elemento);
+	    return;
+	} else if(i >= longitud){
+	    agregaFinal(elemento);
+	    return;
+	} else{
+	    Nodo nodo = buscaNodo(get(i));
+	    Nodo nuevoNodo = new Nodo(elemento);
+
+	    nodo.anterior.siguiente = nuevoNodo;
+	    nuevoNodo.anterior = nodo.anterior;
+	    nodo.anterior = nuevoNodo;
+	    nuevoNodo.siguiente = nodo;
+	    longitud++;
+	}
     }
 
     /**
@@ -135,7 +174,20 @@ public class ListaEstudiante {
      *         <code>null</code> si la lista es vacía.
      */
     public Estudiante eliminaPrimero() {
-        // Aquí va su código.
+        if(esVacia())
+	    return null;
+	
+        Nodo n = cabeza;
+
+	if(longitud == 1)
+	    limpia();
+	else{
+          cabeza = cabeza.siguiente;
+          cabeza.anterior = null;
+          longitud--;
+        }
+	
+        return n.elemento;
     }
 
     /**
@@ -144,7 +196,19 @@ public class ListaEstudiante {
      *         <code>null</code> si la lista es vacía.
      */
     public Estudiante eliminaUltimo() {
-        // Aquí va su código.
+        if(esVacia())
+	    return null;
+	
+        Nodo n = rabo;
+	
+        if(longitud == 1)
+	    limpia();	
+        else{
+          rabo = rabo.anterior;
+          rabo.siguiente = null;
+          longitud--;
+        }
+        return n.elemento;
     }
 
     /**
@@ -154,7 +218,7 @@ public class ListaEstudiante {
      *         <code>false</code> en otro caso.
      */
     public boolean contiene(Estudiante elemento) {
-        // Aquí va su código.
+        return buscaNodo(elemento) != null;
     }
 
     /**
@@ -162,7 +226,16 @@ public class ListaEstudiante {
      * @return una nueva lista que es la reversa la que manda llamar el método.
      */
     public ListaEstudiante reversa() {
-        // Aquí va su código.
+	ListaEstudiante reversa = new ListaEstudiante();
+	
+        Nodo nodo = rabo;
+
+	while(nodo != null){
+	    reversa.agregaFinal(nodo.elemento);
+	    nodo = nodo.anterior;
+        }
+	
+        return reversa;
     }
 
     /**
@@ -171,14 +244,26 @@ public class ListaEstudiante {
      * @return una copiad de la lista.
      */
     public ListaEstudiante copia() {
-        // Aquí va su código.
+        ListaEstudiante copia = new ListaEstudiante();
+
+	Nodo nodo = cabeza;
+	
+        if(esVacia())
+	    return copia;
+	
+        while(nodo != null){
+	    copia.agregaFinal(nodo.elemento);
+	    nodo = nodo.siguiente;
+        }
+        return copia;
     }
 
     /**
      * Limpia la lista de elementos, dejándola vacía.
      */
     public void limpia() {
-        // Aquí va su código.
+        cabeza = rabo = null;
+	longitud = 0;
     }
 
     /**
@@ -187,7 +272,10 @@ public class ListaEstudiante {
      *         es vacía.
      */
     public Estudiante getPrimero() {
-        // Aquí va su código.
+        if(esVacia())
+	    return null;
+	else
+	    return cabeza.elemento;
     }
 
     /**
@@ -196,7 +284,10 @@ public class ListaEstudiante {
      *         es vacía.
      */
     public Estudiante getUltimo() {
-        // Aquí va su código.
+        if(esVacia())
+	    return null;
+	else
+	    return rabo.elemento;
     }
 
     /**
@@ -207,7 +298,14 @@ public class ListaEstudiante {
      *         elementos en la lista.
      */
     public Estudiante get(int i) {
-        // Aquí va su código.
+	if(i < 0 || i >= longitud)
+	    return null;
+        Nodo nodo = cabeza;
+	
+        while(i-->0) {
+            nodo = nodo.siguiente;
+        }
+        return nodo.elemento;
     }
 
     /**
@@ -217,7 +315,15 @@ public class ListaEstudiante {
      *         no está contenido en la lista.
      */
     public int indiceDe(Estudiante elemento) {
-        // Aquí va su código.
+        int indice = 0;
+        Nodo nodo = cabeza;
+        while (nodo != null) {
+            if (nodo.elemento.equals(elemento))
+                return indice;
+            nodo = nodo.siguiente;
+            indice++;
+        }
+        return -1;
     }
 
     /**
@@ -225,7 +331,16 @@ public class ListaEstudiante {
      * @return una representación en cadena de la lista.
      */
     public String toString() {
-        // Aquí va su código.
+        if(esVacia())
+	    return "[]";
+	
+	String s = "[";
+	for (int i = 0; i < longitud-1; i++)
+	    s += (get(i) + ", ");
+	
+	s += (get(longitud-1)+"]");
+
+	return s;
     }
 
     /**
@@ -235,7 +350,22 @@ public class ListaEstudiante {
      *         <code>false</code> en otro caso.
      */
     public boolean equals(ListaEstudiante lista) {
-        // Aquí va su código.
+	if(lista == null)
+	    return false;
+        else if(lista.getLongitud() != longitud)
+	    return false;
+        else if(lista.getLongitud() == 0 && longitud == 0)
+	    return true;
+	
+        Nodo nodo = cabeza;
+
+	for(int i = 0; i< longitud; i++){
+	    if(nodo.elemento.equals(lista.get(i)) == false)
+		return false;
+	    nodo = nodo.siguiente;
+        }
+
+	return true;
     }
 
     /**
@@ -243,7 +373,7 @@ public class ListaEstudiante {
      * @return el nodo cabeza de la lista.
      */
     public Nodo getCabeza() {
-        // Aquí va su código.
+        return cabeza;
     }
 
     /**
@@ -251,6 +381,43 @@ public class ListaEstudiante {
      * @return el nodo rabo de la lista.
      */
     public Nodo getRabo() {
-        // Aquí va su código.
+	return rabo;
+    }
+
+    private Nodo buscaNodo(Estudiante elemento){
+	if(elemento == null)
+	    return null;
+	
+	Nodo nodo = cabeza;
+	
+	while(nodo != null){
+	    if(nodo.elemento.equals(elemento))
+		return nodo;
+	    
+	    nodo = nodo.siguiente;
+	}
+	
+	return null;
+    }
+
+    
+    private void eliminaNodo(Nodo nodo){
+	if(nodo == null)
+	    return;
+	else if(longitud == 1 && contiene(nodo.elemento))
+	    limpia();
+	else if(!contiene(nodo.elemento))
+	    return;
+	else if(nodo.equals(rabo)){
+	    eliminaUltimo();
+	    return;
+	}else if(nodo.equals(cabeza)){
+	    eliminaPrimero();
+	    return; 
+	}else{
+	    nodo.anterior.siguiente = nodo.siguiente;
+	    nodo.siguiente.anterior = nodo.anterior;
+	    longitud--;
+	}
     }
 }
